
args <- commandArgs(trailingOnly = TRUE)
gt=as.numeric(commandArgs(TRUE)[1])
if (is.na(gt)) { gt=10}

#retrieve neutral population pathway
p1 <- "~/scratch/oneway/neutral/" 
p2 <- paste(p1, gt, sep="")
p3 <- paste(p2, "gt", sep= "")
reps= 10 #replicates = 10
n = 1000 #population size = 1000

library(dplyr)
library(tidyr)
library(matrixStats)

y1 = "p3" 

yfile = dir(path = p3, pattern = ".sh")

setwd (p3)

y = read.table(yfile) #read neutral population genome frequency file

y = as.matrix(y)

colnames(y) = c("2.5%", "97.5%") #set 2.5th and 97.5th genome frequency quantiles


s=as.numeric(commandArgs(TRUE)[2])
di1=as.numeric(commandArgs(TRUE)[3])
di2=as.numeric(commandArgs(TRUE)[4])

rn <- sample(1:reps, reps)

q1 <- "~/scratch/oneway/"    #retrieve DMI population pathway          
q2 <- paste(q1, gt, sep="")
q3 <- paste(q2, ".", sep= "")
q4 <- paste(q3, s, sep= "")
q5 <- paste(q4, ".", sep= "")
q6 <- paste(q5, di1, sep= "")
q7 <- paste(q6, ".", sep= "")
q8 <- paste(q7, di2, sep= "")


vcffiles = dir(path = q8, pattern=".txt") 
out.file<- numeric()

for (i in rn){ #read and organize DMI populations
  number <- i 
  setwd(q8) 
  vcf = read.table(vcffiles[i], head = F) 
  dataorder <- vcf[order(vcf$V7),] 
  loci <- as.numeric(dataorder$V7) 
  loci <- sort(loci, decreasing = FALSE) 
  loci <- unique(loci) 
  data <- filter(dataorder, V13 == "A") #retrieve only rows from genome 1, parental species 1
  V7 <- as.numeric(data$V7) 
  diff <- setdiff(loci, V7) 
  data <- cbind(V7, data$V12)
  lngth <- length(diff)
  b <-  list(rep(0, lngth)) 
  diffdata <- data.frame (diff, b) 
  names(diffdata)[1] <- "V7"
  names(diffdata)[2] <- "V2"
  data<- as.data.frame(data)
  good <- rbind(diffdata, data) 
  good <- good[order(good$V7),]
  df5 = cbind(good, number)
  out.file <-rbind(out.file, df5)
}


freq2 <- out.file$V2/2 #halve genome frequency by 2
freq2<- freq2/1000 ##halve genome frequency by population size
out.file <- cbind(freq2, out.file) #bind new decimal frequency to above table

databind <- cbind(y, out.file) #bind neutral quantiles to DMI populaiton table

torf <- databind[,3] < databind[,1] | databind[,3] > databind[,2] #determine if DMI genome frequencies are above the 97.5th neutral quantile or below the 2.5th neutral quantile


torfn <- as.numeric(torf)

torf2 <- cbind(torfn, databind)

torf3 <- cbind(torf2$torfn, torf2$V7, torf2$number)



colnames(torf3) <- c("Extreme", "GenomePosition", "number")

torf3<- as.data.frame(torf3)

torf4 <- torf3 %>% 
  pivot_wider(names_prefix = " ", names_from = GenomePosition, values_from = Extreme)

torf4 <- as.data.frame(torf4)


colsums <- colSums(torf4)
lngth <- length(colsums)
colsums <-colsums[2:lngth]
colsums <- as.matrix(colsums)


colsums3 <- reps - colsums
g <- cbind(colsums, colsums3)#colsums23 is neutral

library(DescTools)
library(rapportools)
out.file1<- numeric()
out.file2 <- numeric()
out.file3 <- numeric() 
out.file4 <- numeric ()

for (i in 1:nrow(g)) { #perform GTest on DMI population allele frequencies
  number <- i
  if (g[number,1] | g[number,2] > 0) {
    observed = c(g[number,1], g[number,2])
    
    expected <- c(0.05, 0.95)
    
    Gtest<- GTest(x=observed, p=expected, correct= "none")
    
    yg <- htest.short(Gtest)
    yg <- as.data.frame(yg)
    yg2 <- yg[2,]
    
    out.file2 <- rbind(out.file2, observed)
    out.file1 <- rbind(out.file1, yg2)
    #out.file1 <- rbind(out.file1, yg2)
    
    
    
  }
   
  else if ((g[number,1] & g[number,2]) == 0) {
    observed2 = c(g[number,1], g[number,2])
    y3 <- 1 #pvalue
    
    out.file3 <- rbind(out.file3, observed2)
    out.file4 <- cbind(out.file4, y3)
    
  }
  
  
}

good5 <- cbind(out.file2, out.file1) #bind population table to  GTest table
good6 <- cbind(good5, torf3$GenomePosition) 

colnames(good6) <- c("Observed", "NeutralExpectation", "PValues", "GenomePosition") # P-values converted from G-Values

if (length(out.file3)  > 0) {
  
  elsegood5 <- cbind(out.file3, out.file4) 
  finalpotential <- rbind(good6, elsegood5)
  
  good6 <- finalpotential
  
}


good6 <- as.data.frame(good6)


spec <- g[,1]

y <- 1- pbinom(spec, size=reps, prob=0.05, TRUE) #size changes with number of replicates 

bfc <- p.adjust(y, method = "fdr", n = length(spec)) #perform False-Discovery rate on p-values
bfc <- as.data.frame(bfc)
bfcg <- cbind(bfc, good6[,4])
bfcg <- cbind(bfcg,good6[,3])
final <-  filter(bfcg, bfc < 0.05 ) #retrieve genome positions with P-values below 0.05
final2 <- cbind (final[,2], -log10(final[,1])) #take the -log10 of P-Values
final2 <- cbind(final2, final[,3]) 
final2 <- as.data.frame (final2)
genome1 <- filter (final2, final2[,1] < 20800000) #isolate loci data from chromosome 1 
genome2 <- filter (final2, final2[,1] >= 20800000) #isolate loci data from chromosome 2

#Chromosome 1
maxgenome1 <- max(genome1[,2]) #determine the locus/loci with the largest log10 P-VALUE 

con1min <- maxgenome1 - 1.92 #determine loci with 1.92 units from max log P-VALUE


fing1 <- filter(genome1, genome1[,2] >= con1min) #collect all loci with 1.92 units from max log P-VALUE #These loci represent the DMI estimate locations for chromosome 1

#Chromosome 2
#repeat above process for chromosome  2 to determine the DMI estimate locations for chromosome 2 
maxgenome2 <- max(genome2[,2])
con2min <- maxgenome2 - 1.92
fing2 <- filter(genome2, genome2[,2] >= con2min)


colnames(final2) = c("GenomePosition","NegLogLikelihood", "P-Value") 
colnames(fing1) = c("GenomePositionChrom1","NegLogLikelihood1", "P-Value1") 
colnames(fing2) = c("GenomePositionChrom2","NegLogLikelihood2", "P-Value2") 



#ESTIMATE ANALYSIS AND SPECIFICITY CHROMOSOME 1 #determine accuracy and precision of estimates for chromosome 1

DMIlocus1 <-  2601040 #Correct DMI locus
c1 <- fing1$GenomePositionChrom1 == DMIlocus1 #determine if correct DMI locus is included in estimates for chromosome 1
c1 <- sum(as.numeric(c1)) 


#determine numerically if correct DMI locus is included in estimates for chromosome 1
if (c1 > 0) { 
  e1 <- 1 
}else { 
  e1 <- 0 }

#determine width of estimate loci block for Chromosome 1
maxg1 <- max(fing1$GenomePositionChrom1) 
ming1 <- min(fing1$GenomePositionChrom1)
rawwidth1 <- as.numeric(maxg1 - ming1)


fractionwidth1 <- rawwidth1/20800000 #Retrieve fraction by dividing the width by genome size 

#determine lefthand, maximum, and righthand value of estimate block
widths1 <- cbind(rawwidth1, fractionwidth1)
maxestimate <- max(fing1$NegLogLikelihood1)
max <- filter(fing1, fing1$NegLogLikelihood1 == maxestimate)
if (nrow(max) > 1)
{x <- ncol(max)/2 
x2 <- round(x)
max <-  fing1[x2,] }
righthand <-  filter(fing1, fing1$GenomePositionChrom1 == maxg1)
lefthand <-  filter(fing1, fing1$GenomePositionChrom1 == ming1)
threeestimates <- cbind (lefthand, max, righthand)
EstimatesChromosome1 <- cbind(threeestimates, widths1, e1)
colnames(EstimatesChromosome1) <- c("LHpos1", "LHlikelihood1", "LHpvalue1", "Maxpos1", "Maxlikelihood1", "Maxpvalue1", "RHpos1", "RHlikelihood1", "RHpvalue1", "RawWidth1", "FractionWidth1", "EstimateAccuracy1")




#ESTIMATE ANALYSIS AND SPECIFICITY CHROMOSOME 2 #repeate steps above to determine accuracy and precision of estimates for chromosome 2

DMIlocus2 <- 31201040 
c2 <- fing2$GenomePositionChrom2 == DMIlocus2
c2 <- sum(as.numeric(c2))


if (c2 > 0) {
  e2 <- 1 
}else { 
  e2 <- 0 }

maxg2 <- max(fing2$GenomePositionChrom2)
ming2 <- min(fing2$GenomePositionChrom2)
rawwidth2 <- as.numeric(maxg2 - ming2)
#entirechrom <- as.numeric(20800000)
fractionwidth2 <- rawwidth2/20800000
widths2 <- cbind(rawwidth2, fractionwidth2)
maxestimate <- max(fing2$NegLogLikelihood2)
max <- filter(fing2, fing2$NegLogLikelihood2 == maxestimate)
if (nrow(max) > 1)
{x <- ncol(max)/2 
x2 <- round(x)
max <-  fing2[x2,] }
righthand <-  filter(fing2, fing2$GenomePositionChrom2 == maxg2)
lefthand <-  filter(fing2, fing2$GenomePositionChrom2 == ming2)
threeestimates <- cbind (lefthand, max, righthand)
EstimatesChromosome2 <- cbind(threeestimates, widths2, e2)
colnames(EstimatesChromosome2) <- c("LHpos2", "LHlikelihood2", "LHpvalue2", "Maxpos2", "Maxlikelihood2", "Maxpvalue2", "RHpos2", "RHlikelihood2", "RHpvalue2", "RawWidth2", "FractionWidth2", "EstimateAccuracy2")

#Construct final data table with estimate accuracy and precision information  

finalest <- as.data.frame(cbind(EstimatesChromosome1, EstimatesChromosome2))

write.table(finalest, sep=",", quote= FALSE, col.names = FALSE, row.names = FALSE) #n-print(finalest, row.names = FALSE) 

